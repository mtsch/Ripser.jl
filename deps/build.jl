using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libripser"], :libripser),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/mtsch/RipserBuilder/releases/download/v0.3.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Ripser.v0.3.2.aarch64-linux-gnu.tar.gz", "81124f2573ad8d23bca5cc794ea15112907d04c1c485b0ec97db4c05f918e2dc"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Ripser.v0.3.2.aarch64-linux-musl.tar.gz", "453241eff4612d93303e7a383efeffa2f573977681de6660314169fd6f541313"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Ripser.v0.3.2.arm-linux-gnueabihf.tar.gz", "909acf88d291af0756844ac68a75d1acbf089c8d69ef177a4d04533b30ec37ed"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Ripser.v0.3.2.arm-linux-musleabihf.tar.gz", "ff071183d41351ebc8c63e541a502add249da7d3dd50c9ea3161922b5175ffae"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Ripser.v0.3.2.i686-linux-gnu.tar.gz", "787abad75b6221176ba71d5437c717682f046e24d3777af5a007c0c5cfac2b7c"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Ripser.v0.3.2.i686-linux-musl.tar.gz", "e5faac8908283ce9c51cc02fd722778f61f39fba835231fb053c916cc97fa98f"),
    Windows(:i686) => ("$bin_prefix/Ripser.v0.3.2.i686-w64-mingw32.tar.gz", "0e04642c9c93b2b2e0a0effba3957413dd892610c5e9aa4a3e4ed1b31464eb4d"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Ripser.v0.3.2.powerpc64le-linux-gnu.tar.gz", "7d4f3247a3099cae28ace9f392a6283c19d08bcc6bd804c19c684cbb28f2cb8f"),
    MacOS(:x86_64) => ("$bin_prefix/Ripser.v0.3.2.x86_64-apple-darwin14.tar.gz", "7aa7f553e924eae22a05260ac97bf50306ee6406a67a2f04883ec0bb2a29c148"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Ripser.v0.3.2.x86_64-linux-gnu.tar.gz", "fd72aa2205eff20e62cc7ed62313eaeb9d83753066e138665f8bb7921deb9d65"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Ripser.v0.3.2.x86_64-linux-musl.tar.gz", "61cbcf04419d27942f53e72164008464f22da06cf0154fbf06a0e22c6182541b"),
    FreeBSD(:x86_64) => ("$bin_prefix/Ripser.v0.3.2.x86_64-unknown-freebsd11.1.tar.gz", "0bc70c1dab1f028271e7826579f7e8140c95ec8d1143d811a568d39c2d4cb778"),
    Windows(:x86_64) => ("$bin_prefix/Ripser.v0.3.2.x86_64-w64-mingw32.tar.gz", "2d12b21ac64d59d15903e4ee11ff7326bdc0642722cb2fb35613851aae78ffcd"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
